@model ConciliacaoModelo.model.cadastros.Estabelecimento
@using Conciliacao.App_Helpers.Componentes

@{
    ViewBag.Title = "Cadastro de estabelecimentos";
}


@section cssespecific {

    <style type="text/css">
        div.content.hideContent {
            overflow: hidden;
            height: 0px;
        }

        div.content.showContent {
            height: auto;
        }
    </style>

}

<section id="content">

    <!-- NEW COL START -->
    <article class="col-sm-12 col-md-12 col-lg-12">

        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false">
            <!-- widget options:
            usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

            data-widget-colorbutton="false"
            data-widget-editbutton="false"
            data-widget-togglebutton="false"
            data-widget-deletebutton="false"
            data-widget-fullscreenbutton="false"
            data-widget-custombutton="false"
            data-widget-collapsed="true"
            data-widget-sortable="false"

            -->
            <header>


                <ul class="nav nav-tabs pull-left in">

                    <li class="active">

                        <a data-toggle="tab" href="#hr1" aria-expanded="true"> <i class="fa fa-lg fa-home "></i>  Cadastro de estabelecimento </a>


                    </li>

                    <li class="">
                        <a data-toggle="tab" href="#hr2" aria-expanded="true"> <i class="fa fa-lg fa-group "></i>  Redes do Establecimento </a>
                    </li>

                </ul>

            </header>

            <!-- widget div-->
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->

            </div>
            <!-- end widget edit box -->
            <div class="widget-body no-padding">

                <div class="tab-content">
                    <div class="tab-pane active" id="hr1">
                        @using (Html.BeginForm("CadastrarEstabelecimento", "Estabelecimento", FormMethod.Post, new { @class = "form-horizontal smart-form" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Partial("_ValidationSummary")

                            @Html.HiddenFor(model => model.IdEstabelecimento)

                            <div class="row" style="padding-top: 20px;">
                                <div class="row">
                                    <section class="col col-sm-12 col-md-6 col-lg-6">
                                        @Html.LabelFor(model => model.nome)

                                        <label class="input">
                                            <i class="icon-prepend fa fa-user"></i>
                                            @Html.TextBoxPadraoFor(model => model.nome, new { @maxlength = "60" })
                                        </label>

                                    </section>


                                    <section class="col col-sm-12 col-md-3 col-lg-3">
                                        @Html.LabelFor(model => model.cpfcnpj)
                                        <label class="input">
                                            <i class="icon-prepend fa fa-user"></i>
                                            @Html.TextBoxPadraoFor(model => model.cpfcnpj, new { @onkeypress = "mascaraCC(this,CC)", @maxlength = "18" })
                                        </label>
                                    </section>
                                </div>

                                <div class="row">

                                    <section class="col col-sm-12 col-md-3 col-lg-2">
                                        @Html.LabelFor(model => model.unidade)

                                        <label class="input">
                                            <i class="icon-prepend fa fa-user"></i>
                                            @Html.TextBoxPadraoFor(model => model.unidade, new { @maxlength = "9" })
                                        </label>

                                    </section>


                                    <section class="col col-sm-12 col-md-6 col-lg-6">
                                        @Html.LabelFor(model => model.nmunidade)
                                        <label class="input">
                                            <i class="icon-prepend fa fa-user"></i>
                                            @Html.TextBoxPadraoFor(model => model.nmunidade, new { @maxlength = "60" })
                                        </label>
                                    </section>


                                </div>

                                <div class="row">
                                    <section class="col col-sm-12 col-md-5 col-lg-5">
                                        @Html.LabelFor(model => model.email)
                                        <label class="input">
                                            <i class="icon-prepend fa fa-envelope-o"></i>
                                            @Html.TextBoxPadraoFor(model => model.email)
                                        </label>
                                    </section>

                                    <section class="col col-sm-12 col-md-2 col-lg-2">
                                        @Html.LabelFor(model => model.fone1)
                                        <label class="input">
                                            <i class="icon-prepend fa fa-phone"></i>
                                            @Html.TextBoxPadraoFor(model => model.fone1, new { @onkeypress = "mascaraFONE(this,FONE)", @maxlength = "15" })
                                        </label>
                                    </section>

                                    <section class="col col-sm-12 col-md-2 col-lg-2">
                                        @Html.LabelFor(model => model.fone2)
                                        <label class="input">
                                            <i class="icon-prepend fa fa-mobile-phone"></i>
                                            @Html.TextBoxPadraoFor(model => model.fone2, new { @onkeypress = "mascaraFONE(this,FONE)", @maxlength = "15" })
                                        </label>
                                    </section>
                                </div>

                                <section class="col col-sm-12 col-md-12 col-lg-12">
                                    <h4 class="subtitulo-form">Endereço Completo</h4>
                                </section>

                                <section class="col col-sm-12 col-md-2 col-lg-2">
                                    @Html.LabelFor(model => model.cep)
                                    @Html.TextBoxPadraoFor(model => model.cep, new { @onkeypress = "mascaraCEP(this,CEP)", @maxlength = "9" })
                                </section>

                                <section class="col col-sm-12 col-md-8 col-lg-8">
                                    @Html.LabelFor(model => model.logradouro)
                                    @Html.TextBoxPadraoFor(model => model.logradouro)
                                </section>

                                <section class="col col-sm-12 col-md-2 col-lg-2">
                                    @Html.LabelFor(model => model.numero)
                                    @Html.TextBoxPadraoFor(model => model.numero)
                                </section>

                                <div class="row">
                                    <section class="col col-sm-12 col-md-6 col-lg-2">
                                        @Html.LabelFor(model => model.complemento)
                                        @Html.TextBoxPadraoFor(model => model.complemento)
                                    </section>
                                    <section class="col col-sm-12 col-md-6 col-lg-3">
                                        @Html.LabelFor(model => model.bairro)
                                        @Html.TextBoxPadraoFor(model => model.bairro)
                                    </section>
                                    <section class="col col-sm-12 col-md-6 col-lg-3">
                                        @Html.LabelFor(model => model.cidade)
                                        @Html.TextBoxPadraoFor(model => model.cidade)
                                    </section>

                                    <section class="col col-sm-12 col-md-12 col-lg-4">
                                        <label class="">Estado: </label><div class="w-clearfix"></div>
                                        <select name="ds_estado" tabindex="-1" style="width:100%; height: 32px;">
                                            <option value="">Selecione</option>
                                            <option value="AC">Acre</option>
                                            <option value="AL">Alagoas</option>
                                            <option value="AP">Amapá</option>
                                            <option value="AM">Amazonas</option>
                                            <option value="BA">Bahia</option>
                                            <option value="CE">Ceará</option>
                                            <option value="DF">Distrito Federal</option>
                                            <option value="ES">Espírito Santo</option>
                                            <option value="GO">Goiás</option>
                                            <option value="MA">Maranhão</option>
                                            <option value="MT">Mato Grosso</option>
                                            <option value="MS">Mato Grosso do Sul</option>
                                            <option value="MG">Minas Gerais</option>
                                            <option value="PA">Pará</option>
                                            <option value="PB">Paraíba</option>
                                            <option value="PR">Paraná</option>
                                            <option value="PE">Pernambuco</option>
                                            <option value="PI">Piauí</option>
                                            <option value="RJ">Rio de Janeiro</option>
                                            <option value="RN">Rio Grande do Norte</option>
                                            <option value="RS">Rio Grande do Sul</option>
                                            <option value="RO">Rondônia</option>
                                            <option value="RR">Roraima</option>
                                            <option value="SC">Santa Catarina</option>
                                            <option value="SP">São Paulo</option>
                                            <option value="SE">Sergipe</option>
                                            <option value="TO">Tocantins</option>
                                        </select>

                                    </section>

                                </div>


                                <div class="row">
                                    <section class="col col-sm-12 col-md-6 col-lg-6">
                                        @Html.LabelFor(model => model.is_sincroniza_tef)

                                        @Html.CheckBoxFor(model => model.is_sincroniza_tef)

                                    </section>
                                </div>

                            </div>

                            <footer>

                                @Html.BotaoSalvar()
                                <div class="pull-left">
                                    @Html.ActionLink("Voltar", "consultarestabelecimento", "estabelecimento", null, new { @class = "btn btn-warning" })
                                </div>


                            </footer>

                        }

                    </div>

                    <div class="tab-pane" id="hr2">
                        <div style="padding-top: 20px;">
                            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

                                @using (Html.BeginForm("CadastrarEstabelecimentoRede", "Estabelecimento", FormMethod.Post, new { @class = "form-horizontal smart-form" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Partial("_ValidationSummary")

                                    @Html.HiddenFor(model => model.IdEstabelecimento, new { name = "IdEstabelecimento" })
                                    @Html.HiddenFor(model => model.EstabelecimentoRede.Id, new { name = "Id" })

                                    <div class="row" style="padding-top: 20px;">

                                        <div class="row painel_cartao">

                                            <div class="row">
                                                <div class="row">
                                                    <section class="col col-sm-12 col-md-6 col-lg-6">
                                                        <label class="" for="Redes">Rede</label>
                                                        <select id="Redes" name="EstabelecimentoRede.id_rede" class="requerido" style="width:100%">
                                                            @if (!Equals(Model.EstabelecimentoRede.id_rede, 0) && (!(Model.EstabelecimentoRede.ds_rede == null)))
                                                            {
                                                                <option value="@Model.EstabelecimentoRede.id_rede">@Model.EstabelecimentoRede.ds_rede</option>
                                                            }
                                                        </select>
                                                    </section>
                                                </div>

                                                <div class="row">

                                                    <section class="col col-sm-12 col-md-4 col-lg-3">
                                                        @Html.LabelFor(model => model.EstabelecimentoRede.IdEstabelecimentoRede)
                                                        @Html.TextBoxPadraoFor(model => model.EstabelecimentoRede.IdEstabelecimentoRede)
                                                    </section>

                                                    <section class="col col-sm-12 col-md-4 col-lg-3">
                                                        @Html.LabelFor(model => model.EstabelecimentoRede.CodigoEstabelecimento)
                                                        @Html.TextBoxPadraoFor(model => model.EstabelecimentoRede.CodigoEstabelecimento)
                                                    </section>

                                                    <section class="col col-sm-12 col-md-4 col-lg-12">
                                                        @Html.LabelFor(model => model.EstabelecimentoRede.NomeEstabelecimento)
                                                        @Html.TextBoxPadraoFor(model => model.EstabelecimentoRede.NomeEstabelecimento)
                                                    </section>
                                                </div>

                                                <div class="row"></div>

                                                <section class="col col-sm-12 col-md-6 col-lg-6">
                                                    <label class="" for="Redes">VAN</label>
                                                    <select id="Vans" name="EstabelecimentoRede.id_van" class="requerido" style="width:100%">
                                                        @if (!Equals(Model.EstabelecimentoRede.id_van, "") && (!(Model.EstabelecimentoRede.ds_van == null)))
                                                        {
                                                            <option value="@Model.EstabelecimentoRede.ds_van">@Model.EstabelecimentoRede.ds_van</option>
                                                        }
                                                    </select>
                                                </section>
                                            </div>


                                        </div>

                                    </div>

                                    <footer>
                                        <button type="submit" class="btn btn-primary"><i class="fa fa-check"></i>  Adicionar </button>
                                    </footer>

                                }

                                <!-- Widget ID (each widget will need unique ID)-->
                                <div style="padding-top: 20px;" class="jarviswidget jarviswidget-color-darken" id="wid-id-2"
                                     data-widget-editbutton="false"
                                     data-widget-fullscreenbutton="true"
                                     data-widget-sortable="false"
                                     data-widget-deletebutton="false"
                                     data-widget-togglebutton="false">
                                    <!-- widget options:
                                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                                    data-widget-colorbutton="false"
                                    data-widget-editbutton="false"
                                    data-widget-togglebutton="false"
                                    data-widget-deletebutton="false"
                                    data-widget-fullscreenbutton="false"
                                    data-widget-custombutton="false"
                                    data-widget-collapsed="true"
                                    data-widget-sortable="false"

                                    -->
                                    <header>
                                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                                        <h2>Redes cadastradas</h2>
                                    </header>
                                    <!-- widget div-->
                                    <!-- widget edit box -->
                                    <div class="jarviswidget-editbox">
                                        <!-- This area used as dropdown edit box -->

                                    </div>
                                    <!-- end widget edit box -->
                                    <!-- widget content -->
                                    <div class="widget-body no-padding">
                                        <table id="datatable_tabletools" class="table table-striped table-bordered table-hover" width="100%">
                                            @{  Html.RenderPartial("~/Views/Estabelecimento/_ListaEstabelecimentoRedes.cshtml", @Model); }
                                        </table>
                                    </div>
                                    <!-- end widget content -->
                                    <!-- end widget div -->
                                </div>
                                <!-- end widget -->

                            </article>
                        </div>


                    </div>

                </div>
            </div>

        </div>
        <!-- end widget div -->
        <!-- end widget -->
    </article>
    <!-- END COL -->

</section>


@section pagespecific {
    <script src="~/scripts/plugin/bootstrap-tags/bootstrap-tagsinput.min.js"></script>
    <script src="~/scripts/terceiros/maskmoney.min.js"></script>
    <script src="~/scripts/terceiros/cpfcnpj.js" type="text/javascript"></script>
    <script src="~/Scripts/terceiros/cep.js" type="text/javascript"></script>
    <script src="~/Scripts/terceiros/telefone.js" type="text/javascript"></script>

    <script type="text/javascript">

        $(document).ready(function () {

            //for bootstrap 3 use 'shown.bs.tab' instead of 'shown' in the next line
            $('a[data-toggle="tab"]').on('click', function (e) {
                //save the latest tab; use cookies if you like 'em better:
                localStorage.setItem('lastTab', $(e.target).attr('href'));
            });

            //go to the latest tab, if it exists:
            var lastTab = localStorage.getItem('lastTab');

            if (lastTab) {
                $('a[href="' + lastTab + '"]').click();
            }

            $(document).on('keypress', 'input', function (e) {

                if (e.keyCode == 13 && e.target.type !== 'submit') {
                    e.preventDefault();
                    return $(e.target).blur().focus();
                }

            });

            $("#cep").change(function () {
                var cep = $("#cep").val();
                var url = "http://api.postmon.com.br/v1/cep/" + cep;
                $.getJSON(url, function (result) {
                    //Se deu certo

                    $("#cidade").val(result["cidade"]);
                    $("#bairro").val(result["bairro"]);
                    $("#logradouro").val(result['logradouro']);
                    $("#IdCidade").val(result['cidade']);
                    $("#numero").focus();
                });
            });


            var Url = '@Url.Action("GetRedes", "Redes")';
            $("#Redes").select2({
                placeholder: "Selecione uma rede",
                minimumInputLength: 0,
                language: "pt-BR",
                ajax: {
                    dataType: "json",
                    url: Url,
                    data: function (params) {
                        return {
                            term: params.term // search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: $.map(data, function (obj) {
                                return { id: obj.id, text: obj.text };
                            })
                        };
                    },
                    cache: true
                }
            });

            var Url = '@Url.Action("GetVans", "Vans")';
            $("#Vans").select2({
                placeholder: "Selecione uma VAN",
                minimumInputLength: 0,
                language: "pt-BR",
                ajax: {
                    dataType: "json",
                    url: Url,
                    data: function (params) {
                        return {
                            term: params.term // search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: $.map(data, function (obj) {
                                return { id: obj.id, text: obj.text };
                            })
                        };
                    },
                    cache: true
                }
            });


            /*     var sid = '#select';
                 $(document.body).on("change", sid, function (ev) {
                     var choice;
                     var values = ev.val;
                     // This is assuming the value will be an array of strings.
                     // Convert to a comma-delimited string to set the value.
                     if (values !== null && values.length > 0) {
                         for (var i = 0; i < values.length; i++) {
                             if (typeof choice !== 'undefined') {
                                 choice += ",";
                                 choice += values[i];
                             }
                             else {
                                 choice = values[i];
                             }
                         }
                     }
                     // Set the value so that MVC will load the form values in the postback.
                     $('#NmCategoria').val(choice);
                 });*/

            /*   var sid = '#select';
               $(document.body).on("change", sid, function (ev) {
                   var choice;
                   var values = ev.val;
                   // This is assuming the value will be an array of strings.
                   // Convert to a comma-delimited string to set the value.
                   if (values !== null && values.length > 0) {
                       for (var i = 0; i < values.length; i++) {
                           if (typeof choice !== 'undefined') {
                               choice += ",";
                               choice += values[i];
                           }
                           else {
                               choice = values[i];
                           }
                       }
                   }
                   // Set the value so that MVC will load the form values in the postback.
                   $('#NmCategoria').val(choice);
               });*/


            //   $('input[maxlength]').maxlength({
            //      warningClass: "label label-success",
            //      limitReachedClass: "label label-important",
            //   });
            // formata valor
            $("#valor").maskMoney({ allowNegative: false, thousands: '.', decimal: ',', affixesStay: false });


            /* BASIC ;*/
            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            /* TABLETOOLS */
            var table = $('#datatable_tabletools').dataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                select: { style: 'multi' },
                language: {
                    "sEmptyTable": "Nenhum registro encontrado",
                    "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                    "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Mostrando _MENU_ por pág&nbsp;&nbsp;",
                    "sLoadingRecords": "Carregando...",
                    "sProcessing": "Processando...",
                    "sZeroRecords": "Nenhum registro encontrado",
                    "oPaginate": {
                        "sNext": "Próximo",
                        "sPrevious": "Anterior",
                        "sFirst": "Primeiro",
                        "sLast": "Último"
                    },
                    "oAria": {
                        "sSortAscending": ": Ordenar colunas de forma ascendente",
                        "sSortDescending": ": Ordenar colunas de forma descendente"
                    }
                },

                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-6 hidden-xs'Tl >r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [

                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "Conciliador",
                           "sPdfMessage": "",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sButtonText": "Impr.",
                           "sMessage": "Gerado por AllPayments <i>(Esc para fechar)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Todos"]],
                "pageLength": 25,
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#datatable_tabletools'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

        });

    </script>

    @Scripts.Render("~/scripts/datatables/js")

}
