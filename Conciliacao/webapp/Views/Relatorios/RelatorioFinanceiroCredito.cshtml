@model Conciliacao.Models.Relatorios.TransacaoCreditosViewModel
@using Conciliacao.App_Helpers.Componentes
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.NomeDaJanela = "Relatório financeiro de créditos";
    ViewBag.Relatorio = "RelatorioFinanceiroCredito";
}

<style>
    #datatable_tabletools span {
        display: none;
    }

    #datatable_tabletools_debitos span {
        display: none;
    }

    .table {
        width: 100%;
        max-width: none;
    }
</style>

<div id="content">

    <div class="row ">

        <!-- NEW COL START -->
        <article class="col-sm-12 col-md-12 col-lg-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-0" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="margin-bottom:0px;">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"

                -->
                <header>
                    <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                    <h2>Filtros</h2>

                </header>


                <!-- widget edit box -->
                <div class="jarviswidget-editbox">
                    <!-- This area used as dropdown edit box -->

                </div>
                <!-- end widget edit box -->
                <div class="widget-body no-padding">

                    @using (Html.BeginForm((string)ViewBag.Relatorio, "Relatorios", FormMethod.Post, new { @id = "form-processar", @class = "form-horizontal smart-form", @style = "padding-top:10px" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Partial("_ValidationSummary")

                        // @Html.HiddenFor(model => model.id)



                        <!--  <section class="col col-sm-12 col-md-2 col-lg-2">
                                  <label for="tp_agendamento">Período</label>
                                  <div>
                                      Html.DropDownList("tp_data", null, new { class = "form-control" })
                                  </div>
                              </section>
                            -->
                        <div class="col col-sm-12 col-md-4 col-lg-3">
                            <label class="" for="filtro_data">Período de recebimento</label>
                            <script>
                                function Limpar() {
                                    document.getElementById('datainicio').value = "";
                                    document.getElementById('datafinal').value = "";
                                }

                                function SetDtInicial(dia, mes, ano) {
                                    document.getElementById('datainicio').value = preencheZerosInt(dia, 2) + "/" + preencheZerosInt(mes, 2) + "/" + preencheZerosInt(ano, 4);
                                }

                                function SetDtFinal(dia, mes, ano) {
                                    document.getElementById('datafinal').value = preencheZerosInt(dia, 2) + "/" + preencheZerosInt(mes, 2) + "/" + preencheZerosInt(ano, 4);
                                }

                                function SetHoje() {
                                    var data = new Date();

                                    SetDtInicial(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function SetOntem() {
                                    var data = new Date();

                                    data.setDate(data.getDate() - 1);

                                    SetDtInicial(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function SetAmanha() {
                                    var data = new Date();

                                    data.setDate(data.getDate() + 1);

                                    SetDtInicial(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function SetMesPassado() {
                                    //Inicial
                                    var data = new Date();
                                    data.setMonth(data.getMonth() - 1);
                                    SetDtInicial(1, data.getMonth() + 1, data.getFullYear());
                                    //Final
                                    data = new Date(data.getFullYear(), data.getMonth() + 1, 0);
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function SetMesAtual() {
                                    //Inicial
                                    var data = new Date();
                                    SetDtInicial(1, data.getMonth() + 1, data.getFullYear());
                                    //Final
                                    data = new Date(data.getFullYear(), data.getMonth() + 1, 0);
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function SetProximoMes() {
                                    //Inicial
                                    var data = new Date();
                                    data.setMonth(data.getMonth() + 1);
                                    SetDtInicial(1, data.getMonth() + 1, data.getFullYear());
                                    //Final
                                    data = new Date(data.getFullYear(), data.getMonth() + 1, 0);
                                    SetDtFinal(data.getDate(), data.getMonth() + 1, data.getFullYear());
                                }

                                function preencheZeros(valor, tamanho) {
                                    var result = valor;

                                    if (result != '') {
                                        var contador = result.length;

                                        if (result.length < tamanho) {
                                            do {
                                                result = "0" + result;
                                                contador += 1;
                                            } while (contador < tamanho)
                                        }
                                    }

                                    return result;
                                }

                                function preencheZerosInt(valor, tamanho) {
                                    return preencheZeros(valor.toString(), tamanho);
                                }

                            </script>

                            <div class="row">
                                <section class="col col-sm-12 col-md-3 col-lg-5" style="padding-right: 1px !important;padding-left: 0px !important;">
                                    @Html.TextBox("datainicio", (string)ViewBag.DataInicio, new { @maxlength = "10", @data_dateformat = "dd/mm/yy", @onkeypress = "mascaraDT(this, DATA)", @filtrar = "", @onclick = "this.focus();this.select()", @class = "form-control datepicker" })
                                </section>

                                <section class="col col-sm-12 col-md-3 col-lg-7" style="padding-left: 2px !important;">
                                    <div class="input-group">
                                        @Html.TextBox("datafinal", (string)ViewBag.DataFinal, new { @maxlength = "10", @data_dateformat = "dd/mm/yy", @onkeypress = "mascaraDT(this, DATA)", @filtrar = "", @onclick = "this.focus();this.select()", @class = "form-control datepicker" })
                                        <div class="input-group-btn">
                                            <button class="btn btn-default btn-primary dropdown-toggle" id="txtPeriodo_btnOpcoes" data-toggle="dropdown" type="button">
                                                <i class="fa fa-list"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a href="#" onclick="SetOntem();">Ontem</a></li>
                                                <li><a href="#" onclick="SetHoje();">Hoje</a></li>
                                                <li><a href="#" onclick="SetAmanha();">Amanhã</a></li>
                                                <li class="divider"></li>
                                                <li><a href="#" onclick="SetMesPassado();">Mês passado</a></li>
                                                <li><a href="#" onclick="SetMesAtual();">Mês atual</a></li>
                                                <li><a href="#" onclick="SetProximoMes();">Próximo mês</a></li>
                                                <li class="divider"></li>
                                                <li><a href="#" onclick="Limpar();">Limpar</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </section>
                            </div>
                        </div>


                        <section class="col col-sm-12 col-md-3 col-lg-3">
                            <label class="" for="filtro_estabelecimento">Estabelecimento</label>
                            <select id="Estabelecimentos" name="filtro_estabelecimento" class="requerido" style="width:100%">
                                if (@Model.filtro_estabelecimento != 0)
                                {
                                <option value="@Model.filtro_estabelecimento">@Model.filtro_nm_estabelecimento</option>
                                }
                            </select>
                            @Html.HiddenFor(model => model.filtro_nm_estabelecimento)
                        </section>

                        <section class="col col-sm-12 col-md-2 col-lg-2">
                            <label for="tp_administradora">Bandeira</label>
                            <div>
                                @Html.DropDownList("tp_administradora", null, new { @class = "form-control" })
                            </div>
                        </section>

                            <section class="col col-sm-12 col-md-3 col-lg-2">
                                <label class="" for="filtro_resumo">Resumo</label>
                                @Html.TextBoxPadraoFor(model => model.filtro_resumo, new { onclick = "this.focus();this.select()", @value = @ViewBag.filtro_resumo })
                            </section>

                            <section class="col col-sm-12 col-md-4 col-lg-3">
                                <label class="" for="filtro_banco">Banco</label>
                                <select id="Bancos" name="filtro_banco" class="requerido" style="width:100%">
                                    @if (@Model.filtro_banco != 0)
                                    {
                                        <option value="@Model.filtro_banco">@Model.filtro_nm_banco</option>
                                    }
                                </select>
                                @Html.HiddenFor(model => model.filtro_nm_banco)
                            </section>

                            <section class="col col-sm-12 col-md-1 col-lg-1">
                                <label class="">&nbsp;</label>
                                <div>
                                    @Html.BotaoFiltrar()
                                </div>
                            </section>

                    }

                </div>

            </div>
            <!-- end widget -->

        </article>
        <!-- END COL -->

    </div>

    <div class="row no-padding no-margin">

        <div class="col-xs-12 col-sm-12 col-md-1 col-lg-1">
            <div class="btn-group">
                <button class="btn btn-info dropdown-toggle" data-toggle="dropdown" style="margin: 10px 0 0;">
                    Agrupamento <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="group-by" data-column="4">Agrupa por Data</a>
                    </li>
                    <li>
                        <a class="group-by" data-column="12">Agrupa por Bandeira</a>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col-xs-12 col-sm-12 col-md-10 col-lg-10">
            <ul id="sparks" class="">

                <li class="">
                    <h4> <span class="" style="text-align: center;" id="labeltotaiso">Totais: </span></h4>
                </li>

                <li class="sparks-info">
                    <h5> &nbsp;&nbsp; Qtd. Débitos <span class="txt-color-black" style="text-align: right;" id="totqtd">@ViewBag.QtdRegistrosDebitos</span></h5>
                </li>

                <li class="sparks-info">
                    <h5> &nbsp;&nbsp; Total Débitos <span class="txt-color-purple" style="text-align: right;" id="totbruto">@ViewBag.TotalLiqDebitos</span></h5>
                </li>

                <li class="sparks-info">
                    <h5> &nbsp;&nbsp; Qtd. Créditos <span class="txt-color-black" style="text-align: right;" id="totqtd">@ViewBag.QtdRegistros</span></h5>
                </li>

                <li class="sparks-info">
                    <h5> &nbsp;&nbsp; Total Créditos <span class="txt-color-purple" style="text-align: right;" id="totbruto">@ViewBag.TotalLiqCreditos</span></h5>
                </li>

                <li class="sparks-info">
                    <h5> &nbsp;&nbsp; Total Geral <span class="txt-color-purple" style="text-align: right;" id="totbruto">@ViewBag.TotalGeralLiq</span></h5>
                </li>

            </ul>
        </div>
        <div class="col-xs-12 col-sm-12 col-md-1 col-lg-1">
            <div class="btn-group">
                <button class="btn btn-info dropdown-toggle" data-toggle="dropdown" style="margin: 10px 0 0;">
                    Imprimir <span class="caret"></span>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a href="javascript:void(0);" id="creditos" target="_blank">Créditos</a>
                    </li>
                    <li>
                        <a href="javascript:void(0);" id="debitos" target="_blank">Débitos</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>




    <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

            <!-- Html.ActionLink("Cadastrar", (string)ViewBag.Action, (string)ViewBag.Controller, null, new { class = "btn btn-danger", style = "margin-bottom: 5px !important;" }) -->
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-7" data-widget-editbutton="false" data-widget-fullscreenbutton="false" data-widget-deletebutton="false" data-widget-custombutton="false" data-widget-sortable="false" role="widget">
                <header role="heading">

                    <ul class="nav nav-tabs pull-left in">

                        <li class="@ViewBag.Credito">
                            <a data-toggle="tab" href="#hr1" aria-expanded="true"> <i class="fa fa-lg fa-file-text-o"></i> Créditos </a>
                        </li>

                        <li class="@ViewBag.Debito">
                            <a data-toggle="tab" href="#hr2" aria-expanded="true"> <i class="fa fa-lg fa-file-text-o"></i> Débitos </a>
                        </li>

                    </ul>
                    <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                </header>
                <!-- widget div-->
                <!-- widget edit box -->
                <div class="jarviswidget-editbox">
                    <!-- This area used as dropdown edit box -->

                </div>
                <!-- end widget edit box -->
                <!-- widget content -->
                <div class="widget-body no-padding">

                    <div class="tab-content">
                        <div class="tab-pane @ViewBag.Credito" id="hr1">


                            <table id="datatable_tabletools" class="table table-striped table-bordered table-hover" width="100%">
                                <thead>
                                    <tr style="page-break-inside: avoid !important">
                                        <th>
                                            Ponto.Venda
                                        </th>
                                        <th>
                                            Estab.
                                        </th>
                                        <th>
                                            Nm.Estabelecimento
                                        </th>
                                        <th>
                                            Documento
                                        </th>
                                        <th>
                                            Dt.Lançamento
                                        </th>
                                        <th>
                                            Vl.Lançamento
                                        </th>
                                        <th>
                                            Banco
                                        </th>
                                        <th>
                                            Agência
                                        </th>
                                        <th>
                                            Conta
                                        </th>

                                        <th>
                                            Dt.Movimento
                                        </th>

                                        <th>
                                            Resumo.Venda
                                        </th>
                                        <th>
                                            Dt.Res.Venda
                                        </th>
                                        <th>
                                            Bandeira
                                        </th>
                                        <!--   <th>
                                            Tipo.Transação
                                        </th> -->
                                        <th>
                                            Vl.Bruto.Rv
                                        </th>
                                        <th>
                                            Vl.Taxa.desconto
                                        </th>
                                        <th>
                                            Nr.Parcela
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in Model.ListCreditos)
                                    {

                                        <tr>

                                            <td style="width: 80px;">
                                                @Html.DisplayFor(modelItem => item.numero_pv_centralizador)
                                            </td>
                                            <td>
                                                @if (item.codigo_estabelecimento == 0)
                                                { @Html.Raw("") }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.codigo_estabelecimento)
                                                }
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.nome_estabelecimento)
                                            </td>
                                            <td>@Html.DisplayFor(modelItem => item.numero_documento)</td>
                                            <td style="text-align: center"> @Html.DisplayFor(modelItem => item.data_lancamento)</td>
                                            <td style="text-align: right">@Html.DisplayFor(modelItem => item.valor_lancamento)</td>
                                            <td>@Html.DisplayFor(modelItem => item.banco_trim)</td>
                                            <td>@Html.DisplayFor(modelItem => item.agencia_trim)</td>
                                            <td>@Html.DisplayFor(modelItem => item.conta_corrente_trim)</td>
                                            <td style="text-align: center">@Html.DisplayFor(modelItem => item.data_movimento)</td>
                                            <td>@Html.DisplayFor(modelItem => item.numero_rv)</td>
                                            <td style="text-align: center">@Html.DisplayFor(modelItem => item.data_rv)</td>
                                            <td>@Html.DisplayFor(modelItem => item.bandeira)</td>

                                            <td style="text-align: right">@Html.DisplayFor(modelItem => item.valor_bruto_rv)</td>
                                            <td style="text-align: right">@Html.DisplayFor(modelItem => item.valor_taxa_desconto)</td>
                                            <td>@Html.DisplayFor(modelItem => item.numero_parcela)</td>
                                        </tr>
                                    }

                                </tbody>
                            </table>



                        </div>

                        <!-- end widget content -->
                        <!-- end widget div -->

                        <div class="tab-pane @ViewBag.Debito" id="hr2">

                            <!-- end widget edit box -->
                            <!-- widget content -->

                            <table id="datatable_tabletools_debitos" class="table table-striped table-bordered table-hover" width="100%">
                                <thead>
                                    <tr>

                                        <th>
                                            Ponto.Venda
                                        </th>
                                        <th>
                                            Estab.
                                        </th>
                                        <th>
                                            Nm.Estabelecimento
                                        </th>
                                        <th>
                                            Dt.Venda
                                        </th>
                                        <th>
                                            Dt.Crédito.Venda
                                        </th>
                                        <th>
                                            Resumo.Venda
                                        </th>
                                        <th>
                                            Banco
                                        </th>
                                        <th>
                                            Agência
                                        </th>
                                        <th>
                                            Conta
                                        </th>
                                        <th>
                                            Valor.Bruto
                                        </th>
                                        <th>
                                            %Taxa
                                        </th>
                                        <th>
                                            Valor.Liquído
                                        </th>
                                        <th>
                                            Bandeira&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                        </th>
                                        <!-- <th>
                                             Cartão
                                         </th>

                                         <th>
                                             NSU.Rede
                                         </th> -->

                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in Model.ListDebitos)
                                    {

                                        <tr style="">


                                            <td>
                                                @Html.DisplayFor(modelItem => item.is_numero_filiacao_pv)
                                            </td>
                                            <td>
                                                @if (item.codigo_estabelecimento == 0)
                                                { @Html.Raw("") }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.codigo_estabelecimento)
                                                }
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.nome_estabelecimento)
                                            </td>

                                            <td style="width: 74px; text-align: center ">
                                                @if (item.data_cv.Equals("01/01/0001"))
                                                {  @Html.Raw("") }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.data_cv)
                                                }
                                            </td>
                                            <td style="width: 74px; text-align: center ">
                                                @if (item.is_tipo_registro.Equals("COMPROVANTE"))
                                                {  @Html.Raw("") }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.data_credito)
                                                }
                                            </td>

                                            <td>
                                                @Html.DisplayFor(modelItem => item.is_numero_resumo_vendas)
                                            </td>

                                            <td>@Html.DisplayFor(modelItem => item.banco_trim)</td>
                                            <td>@Html.DisplayFor(modelItem => item.agencia_trim)</td>
                                            <td>@Html.DisplayFor(modelItem => item.conta_corrente_trim)</td>


                                            <td style="text-align: right">
                                                @Html.DisplayFor(modelItem => item.is_valor_bruto)
                                            </td>

                                            <td style="text-align: right">
                                                @Html.DisplayFor(modelItem => item.taxa_cobrada)
                                            </td>

                                            <td style="text-align: right">
                                                @Html.DisplayFor(modelItem => item.is_valor_liquido)
                                            </td>

                                            <td style="text-align: center">
                                                @Html.DisplayFor(modelItem => item.is_bandeira)
                                            </td>

                                            <!-- td style="text-align: center">
                                                Html.DisplayFor(modelItem => item.numero_cartao)
                                            </td>

                                            <td>
                                                Html.DisplayFor(modelItem => item.is_nsu_rede)
                                            </td-->

                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- end widget -->
                </div>
        </article>
    </div>
</div>



@section pagespecific {

    <script src="~/scripts/terceiros/data.js" type="text/javascript"> </script>


    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/pdfmake.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.32/vfs_fonts.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/bs/jszip-2.5.0/dt-1.10.16/b-1.4.2/b-colvis-1.4.2/b-html5-1.4.2/b-print-1.4.2/r-2.2.0/datatables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/rowgroup/1.0.2/js/dataTables.rowGroup.min.js"></script>

    <!--    <link rel="stylesheet" type="text/css" href="ttps://cdn.datatables.net/v/bs/jszip-2.5.0/dt-1.10.16/b-1.4.2/b-colvis-1.4.2/b-html5-1.4.2/b-print-1.4.2/" /> -->

    <script type="text/javascript">

        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $('#Estabelecimentos').on("select2:select", function (e) {
                console.log($('#Estabelecimentos').select2('data')[0].text);
                $('#filtro_nm_estabelecimento').val($('#Estabelecimentos').select2('data')[0].text); // what you would like to happen
        });

        var Url = '@Url.Action("GetEstabelecimentosRede", "Estabelecimento")';
        $("#Estabelecimentos").select2({
            placeholder: "Selecione um estabelecimento",
            minimumInputLength: 0,
            allowClear: true,
            language: $.extend({},
            $.fn.select2.defaults.defaults.language, {
                noResults: function () {
                    return $("<span>Nenhum resultado encontrado!</span>");
                },
                inputTooShort: function (e) { var t = e.minimum - e.input.length, n = "Digite " + t + " ou mais caracteres"; return n }
            }),
            ajax: {
                dataType: "json",
                url: Url,
                data: function (params) {
                    return {
                        term: params.term // search term
                    };
                },
                processResults: function (data) {
                    return {
                        results: $.map(data, function (obj) {
                            return { id: obj.id, text: obj.text };
                        })
                    };
                },
                cache: true
            }
        });

        $("#creditos").click(function () {

            var form = $("form#form-processar");
            form.attr("target", "_blank");
            form.attr("action", "@Url.Action("RelatorioFinanceiroCreditosPreview", "Relatorios")");
            form.submit();
            form.removeAttr("target");
            form.attr("action", "/relatorios/relatoriofinanceirocredito");
        });

        $("#debitos").click(function () {

            var form = $("form#form-processar");
            form.attr("target", "_blank");
            form.attr("action", "@Url.Action("RelatorioFinanceiroDebitosPreview", "Relatorios")");
            form.submit();
            form.removeAttr("target");
            form.attr("action", "/relatorios/relatoriofinanceirocredito");

        });

        $(document).ready(function () {

            /* // DOM Position key index //

            l - Length changing (dropdown)
            f - Filtering input (search)
            t - The Table! (datatable)
            i - Information (records)
            p - Pagination (paging)
            r - pRocessing
            < and > - div elements
            <"#id" and > - div with an id
            <"class" and > - div with a class
            <"#id.class" and > - div with an id and class

            Also see: http://legacy.datatables.net/usage/features
            */

            /* TABLETOOLS */
            printCounter = 0;
            var table = $('#datatable_tabletools').DataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                language: {
                    "sEmptyTable": "Nenhum registro encontrado",
                    "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                    "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Mostrando _MENU_ por pág&nbsp;&nbsp;",
                    "sLoadingRecords": "Carregando...",
                    "sProcessing": "Processando...",
                    "sZeroRecords": "Nenhum registro encontrado",
                    "search": "Buscar: ",
                    "oPaginate": {
                        "sNext": "Próximo",
                        "sPrevious": "Anterior",
                        "sFirst": "Primeiro",
                        "sLast": "Último"
                    },
                    "oAria": {
                        "sSortAscending": ": Ordenar colunas de forma ascendente",
                        "sSortDescending": ": Ordenar colunas de forma descendente"
                    }
                },
                "fnInitComplete": function () {
                    this.fnAdjustColumnSizing()
                },


                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-9'f>TlB>" +
                "t" +
                "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",

                "buttons":
                [
                    {
                        extend: 'collection',
                        text: 'Exportar',
                        buttons:
                        [
                            {
                                extend: 'print',
                                text: 'Imprimir',
                                exportOptions: {
                                    columns: [':visible']
                                },
                                messageTop: function () {
                                    return 'Filtro utilizado-> Data de lançamento: '+ document.getElementById('datainicio').value + ' à ' + document.getElementById('datafinal').value;
                                },
                            },
                            {
                                extend: 'copyHtml5',
                                text: 'Copiar',
                                exportOptions: {
                                    columns: [':visible']
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: 'CSV',
                                exportOptions: {
                                    columns: [':visible']
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: 'XLS',
                                exportOptions: {
                                    columns: [':visible'],
                                    format: {
                                        body: function (data, row, column, node) {
                                            // Replace , with . in column 3
                                            return column === 3 || column === 11 || column === 12 ?
                                                data.replace(',', '.') :
                                                data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: 'PDF',
                                exportOptions: {
                                    columns: [':visible']
                                },
                                orientation: 'landscape',
                                pageSize: 'LEGAL'
                            }
                        ]
                    }
                ],
                "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Todos"]],
                "sScrollX": "100%",
                "pageLength": -1,
                "bAutoWidth": true,
                order: [[4, 'asc']],
                exportOptions: {
                    // Any other settings used
                    grouped_array_index: [4]
                },
                rowGroup: {
                    startRender: null,
                    endRender: function (rows, group) {
                        var salaryAvg = rows
                            .data()
                            .pluck(5)
                            .reduce(function (a, b) {
                                return a + b.replace(/[^\d]/g, '') * 1;
                            }, 0);
                        salaryAvg = formatReal(salaryAvg);


                       /*  var ageAvg = rows
                            .data()
                            .pluck(3)
                            .reduce(function (a, b) {
                                return a + b * 1;
                            }, 0) / rows.count(); */

                        return $('<tr/>')
                            .append('<td colspan="2" style="text-align: right">Total:</td>')
                            .append('<td style="text-align: center">' + group + '</td>')
                            .append('<td style="text-align: right">R$ ' + salaryAvg + '</td>')
                            .append('<td colspan="12"></td>');
                    },
                    dataSrc: 4
                }

            });

            var table_debito = $('#datatable_tabletools_debitos').DataTable({
                language: {
                    "sEmptyTable": "Nenhum registro encontrado",
                    "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                    "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Mostrando _MENU_ por pág&nbsp;&nbsp;",
                    "sLoadingRecords": "Carregando...",
                    "sProcessing": "Processando...",
                    "sZeroRecords": "Nenhum registro encontrado",
                    "search": "Buscar: ",

                    "oPaginate": {
                        "sNext": "Próximo",
                        "sPrevious": "Anterior",
                        "sFirst": "Primeiro",
                        "sLast": "Último"
                    },
                    "oAria": {
                        "sSortAscending": ": Ordenar colunas de forma ascendente",
                        "sSortDescending": ": Ordenar colunas de forma descendente"
                    }
                },
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-9'f>TlB>" +
                "t" +
                "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",

                "buttons":
                [
                    {
                        extend: 'collection',
                        text: 'Exportar',
                        buttons:
                        [
                            {
                                extend: 'print',
                                text: 'Imprimir',
                                exportOptions: {
                                    columns: [':visible']
                                }
                            },
                            {
                                extend: 'copyHtml5',
                                text: 'Copiar',
                                exportOptions: {
                                    columns: [':visible']
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: 'CSV',
                                exportOptions: {
                                    columns: [':visible']
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: 'XLS',
                                exportOptions: {
                                    columns: [':visible'],
                                    format: {
                                        body: function (data, row, column, node) {
                                            // Replace , with . in column 3
                                            return column === 5 || column === 6 || column === 7 ?
                                                data.replace(',', '.') :
                                                data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'pdfHtml5',
                                text: 'PDF',
                                exportOptions: {
                                    columns: [':visible']
                                },
                                orientation: 'landscape',
                                pageSize: 'LEGAL'
                            }
                        ]
                    }
                ],
                "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Todos"]],
                "pageLength": -1,
                "bAutoWidth": true,
                "aaSorting": [],
                "order": [[4, 'asc']],
                exportOptions: {
                    // Any other settings used
                    grouped_array_index: [4]
                },
                rowGroup: {
                    startRender: null,
                    endRender: function (rows, group) {
                        var salaryAvg = rows
                            .data()
                            .pluck(11)
                            .reduce(function (a, b) {
                                return a + b.replace(/[^\d]/g, '') * 1;
                            }, 0);
                        salaryAvg = formatReal(salaryAvg);


                        /*  var ageAvg = rows
                             .data()
                             .pluck(3)
                             .reduce(function (a, b) {
                                 return a + b * 1;
                             }, 0) / rows.count(); */

                        return $('<tr/>')
                            .append('<td colspan="2" style="text-align: right">Total:</td>')
                            .append('<td style="text-align: center">' + group + '</td>')
                            .append('<td style="text-align: right">R$ ' + salaryAvg + '</td>')
                            .append('<td colspan="10"></td>');
                    },
                    dataSrc: 4
                }
            });

            // Change the fixed ordering when the data source is updated
            table.on('rowgroup-datasrc', function (e, dt, val) {
                table.order.fixed({ pre: [[val, 'asc']] }).draw();
            });

            table_debito.on('rowgroup-datasrc', function (e, dt, val) {
                table_debito.order.fixed({ pre: [[val, 'asc']] }).draw();
            });

            $('a.group-by').on('click', function (e) {
                e.preventDefault();

                table.rowGroup().dataSrc($(this).data('column'));
                table_debito.rowGroup().dataSrc($(this).data('column'));
            });

            $('#Bancos').on("select2:select", function (e) {
                console.log($('#Bancos').select2('data')[0].text);
                $('#filtro_nm_banco').val($('#Bancos').select2('data')[0].text); // what you would like to happen
            });

            var Url = '@Url.Action("GetBancos", "Banco")';
            $("#Bancos").select2({
                placeholder: "Selecione um banco",
                minimumInputLength: 0,
                language: "pt-BR",
                allowClear: true,
                ajax: {
                    dataType: "json",
                    url: Url,
                    data: function (params) {
                        return {
                            term: params.term // search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: $.map(data, function (obj) {
                                return { id: obj.id, text: obj.text };
                            })
                        };
                    },
                    cache: true
                }
            });


        });

    </script>




}






